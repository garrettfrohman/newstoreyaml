openapi: 3.0.0
info:
  title: Import Data API
  version: v0
  description: |
    <a id="importapi"/>Use this resource to import </a> products, categories, price books, and stock on hand into NewStore.
    For more information on how to prepare your data and import it, see the
    [tutorial](/developers/tutorials/import-data) or the
    [integration guide](/developers/guides/importdata) in our documentation.

    **Note:** Before you import data, ensure that you have
    [created a store](/api/integration/inventory-management/store_api/#tag/Stores/operation/createStore).

    As indicated in the documentation, to import the data, create a zip file from the folder that contains the
    JSON files for the entities you are importing. Upload the zip file to a URI that NewStore can access.

    **Important**:
    - We recommend importing data in a single import job, via a single file that does
    not exceed 500 MB. However, if an import job needs to be broken down into multiple imports,
    ensure that each new import job is run after a **5 minute** interval, where product data should
    not exceed 500 MB, and all other entities should not exceed 80 MB.
    - The default limit for creating import jobs is ``20`` for all import jobs except for product imports, the limit for which is ``10``.
    If you reach the limit with current open import jobs, NewStore keeps them in the ``received`` state and API responds with a ``429`` error.
    We recommend you to either start your import jobs in the ``received`` state or mark them as failed using the [Set import job status to failed method](/api/integration/catalog-sfcc/import-api_api/#operation/set-status-to-failed).
    Keeping them in the ``received`` or ``waiting`` state adds to the total number of import jobs considered against the limit.

    NewStore supports HTTPS URIs and Amazon S3 bucket URIs as long as we can access them to download the files. You should consider longer TTL (time to live) for such files, at least in the range of days, because these files are not immediately downloaded but internally queued for import.
    It may happen that during high traffic on the platform, your import might be delayed even for hours. So having a longer TTL can prevent failure in these imports.

    This API allows you to import the following entities.

    **Note**: If you decide to import each entity separately, create import jobs for each data entity
    in this sequence: ``Products > Stock > Pricebooks > Categories (optional)``

    ### Server requirements for image download

    NewStore provides an option to specify an image download URL in products or categories to be imported. We expects that the server pointed in the URL meets following service-level objectives with each import:

    - 99.99 % server response HTTP codes should be `HTTP 200`.
    - 99.99 % latency of server responses should be under `10 seconds`.
    - When a server cannot respond in time, it should return `HTTP 429`. NewStore will make the best effort to retry the image download.

    NewStore attempts up to 5 continuous GET requests. Each request with 20s timeout to read whole response. Response HTTP 429 is considered as retryable error. Each retry is delayed by 0.5s as backoff.
    All non-200, 4xx, and 5xx HTTP status codes are considered unrecoverable and will lead to missing images in the imported products and categories.

    As network between NewStore and image server is volatile, sometimes few images won't be downloaded. The image failure feedback is logged in the import error page. So it is advised to setup monitoring and retry import of products and categories with failed images. For products with no images in the app, the Newstore default product image will be used. As a result, such products are still sellable but store associates will have problems identifying them in the app.

    NewStore does caching of all downloaded images and requests only new images. So in case of duplicate images, only new images will be downloaded from the image server.

    Every request contains:

    - `User-Agent` header identifying NewStore requests (it can be used to simply identify NewStore requests in firewalls).

    To find and fix these errors, see the [Troubleshooting Guide](/developers/guides/importdata#troubleshooting-imports).

    ### Products

    The only way you can create or update products, is by importing them into NewStore.

    A product in NewStore usually refers to a stock-keeping unit (SKU) as `product_id` but can be
    replaced with any other unique identifier.

    Products are imported into a `shop` for a specific locale. A shop represents the hierarchical
    entity into which you import products and categories. It is not a physical store.

    A `variant_group_id` connects all the variants of a product. Each product must be unique to a variant
    group in a shop, and cannot be assigned to multiple variant groups. Even if a product has only one variant,
    create a variant group to contain the single product variant.

    When importing data to multiple fulfillment locations in your business, use the
    ``availabilities_store_ids`` property to specify the ID of the stores or DCs where
    you want to import data.

    If you are importing more than one category, use the ``categories`` > ``is_main`` property to
    specify the main category for the product. This category is displayed against relevant products
    in the `Catalog` tab in Newstore Omnichannel Manager. For more information, see the
    [guide](/developers/guides/importdata#formatting-import).

    The product details that you provide during import determine the product attributes that are
    displayed in NewStore applications and the information that is included in reports.
    Missing information that is not required during an import might still impact your business workflow,
    based on your integrations.

    For example, **Toby Sweater, Black, Size 6**, and **Toby Sweater
    Beige, Size 6**, are `variants` and have different `SKU`s. They are created as two separate
    products and in this example, they belong to the same variant group (`variant_group_id`).

    To enable pre-orders for a product, set the `preorder_start`
    property to the date when pre-orders should begin.

    For more information, see:

    - [JSON schema to import products](/api/integration/catalog-sfcc/import-api_api/#operation/products) -
      **Do not** use this method to import products. This is only the documentation of the schema.
    - [Import tutorial](/developers/tutorials/import-data)
    - [Integration guide](/developers/guides/importdata)


    ### Categories

    The only way you can create or update product categories, is by importing them into NewStore.

    A category refers to the hierarchy applied to your products, in order to organize them.
    Product categories may differ across different sales channels. For example, the category for
    `Toby Sweater Black Size 6` could be **Shop > Clothing**  or **Featured > Winter**.

    Categories are imported into a `shop`, and for a specific `locale`.

    **Important**: Since categories are already imported with the product import, importing categories
    separately is only required if you want them to be accessible via the [List categories
    method](/api/integration/catalog-sfcc/customer-app-api_api/#tag/Categories/operation/listCategories). Such an import will also
    allow you to add pictures and a description for each category and enable sorting sub-categories.

    For more information, see:

    - [JSON schema to import categories](/api/integration/catalog-sfcc/import-api_api/#operation/categories) -
      **Do not** use this method to import categories. This is only the documentation of the schema.
    - [Import tutorial](/developers/tutorials/import-data)
    - [Integration guide](/developers/guides/importdata)

    ### Price books

    The only way you can create or update price books is by importing them into NewStore.

    A price book is a collection of prices for products, in a specific currency. You can import
    multiple price books. For example, each sales channel can have a different price book.

    **Important:** Ensure that you specify the correct number of decimal places for monetary values of prices,
    according to the specified currency. For example, if the currency is specified as ``USD``
    and the price has more than 2 decimal places, it is considered as invalid by the platform.

    For more information, see
    [pricing dependencies on currency](/product/processes/about-payments/#currency-rounding).

    To understand the the JSON schema for importing `price books`, see
    [JSON schema for price books](/api/integration/catalog-sfcc/import-api_api/#operation/price-books). **Do not** use this method to import
    price books. This is only documentation of the schema.

    To import your price books, use the import process described
    in [Importing data](/developers/guides/importdata).

    ### Stock

    The only way you can create or update stock on hand, is by importing it into NewStore.

    Stock refers to the total inventory, at a particular time. Unlike products, you import
    stock into a fulfillment location (distribution center or store), and not into a `shop`.

    **Note:** Ensure that you provide the correct value for the `fulfillment_node_id` property
    during the stock import. Deleting a `fulfillment_node_id` with a wrong value is currently not possible.

    To specify if the quantity you are importing for a product is the new ATP or stock on hand for
    the product at the specified fulfillment location, use the `mode` property.

    To import future inventory at the fulfillment location,
    use the `future_inventory` property, with the `mode` property set to `atp`.

    For more information, see:

    - [JSON schema to import stock](/api/integration/catalog-sfcc/import-api_api#operation/stock) -
      **Do not** use this method to import stock. This is only the documentation of the schema.
    - [Import tutorial](/developers/tutorials/import-data)
    - [Tutorial to import future inventory](/developers/tutorials/import-data#tuto-future-inventory)
    - [Integration guide](/developers/guides/importdata)
    - [Fulfillment configuration API](/api/integration/order-management/newstore_ff_config_api/)

    ### Distribution Centers

    There are two ways to create a distribution center (DC) or warehouse for your business:</p>

    - When you import stock, the location of the stock is automatically created as a `fulfillment_node_id`
      in NewStore. To indicate that the fulfillment location in `fulfillment_node_id` is a DC,
      ensure that the `store_id` is set to `null`. To configure a DC that is created using this method,
      contact the support team.

    - Use this [tutorial](/developers/tutorials/import-data#tuto-create-warehouse)
      to create and configure a DC on your own.

    For more information, see:

    - [JSON schema to import stock](/api/integration/catalog-sfcc/import-api_api/#operation/stock) -
      **Do not** use this method to import stock. This is only the documentation of the schema.
    - [Import tutorial](/developers/tutorials/import-data)
    - [Integration guide](/developers/guides/importdata)
servers:
  - url: 'https://dodici.x.newstore.net/v0/d'
security:
  - newStoreAccessToken: []
paths:
  /import:
    post:
      summary: Create import job
      operationId: create-import-job
      description: |
        Creates an import job to import data into NewStore. The job will not be processed automatically.
        To process it, use the [Start import job method](/api/integration/catalog-sfcc/import-api_api/#operation/start-import-job).

        **Important**: The import job's `source_uri` property must point to a ZIP file for each entity. The
        uncompressed file size must be lower than 240 MB for products. For other import entities, the file size
        must be lower than 80 MB.
      requestBody:
        content:
          application/json:
            example:
              provider: <provider>
              name: product_import_20170306
              source_uri: 'https://some-uri-location/my_data.zip'
              entities:
                - products
                - categories
                - prices
              full: true
            schema:
              type: object
              description: Contains an array of products.
              required:
                - provider
                - source_uri
                - entities
              properties:
                provider:
                  type: string
                  description: 'The name of the provider of the data, for example, Salesforce Commerce Cloud.'
                source_uri:
                  type: string
                  format: uri
                  description: File location of the original file from the provider (only for information). The uncompressed file size per entity must be lower than 80 MB.
                name:
                  type: string
                  description: The name of the job.
                type:
                  type: string
                  description: 'DEPRECATED: The type of the job. Use the ''entities'' property instead.'
                entities:
                  type: array
                  description: 'The type of data provided in this request. The possible values of this fields also determine the naming convention of the JSON files you might import in a ZIP file via the ''POST /import/{import_id}/start'' method.'
                  items:
                    type: string
                    enum:
                      - products
                      - categories
                      - availabilities
                      - prices
                      - dwre_orders
                  uniqueItems: true
                full:
                  type: boolean
                  description: |-
                    Determines if the job is a full or a partial import. A full import deletes the existing data and imports the new data. A partial import adds data on top of existing data.

                    .. important:: |nes| does not support full import for the ``availabilities`` entity. Full imports are only supported for ``products``, ``categories``, and ``prices``.

                    If a full import job contains the ``availabilities`` entity, |nes| does not import the ``availabilities`` data.
                  default: false
                shop:
                  type: string
                  description: The shop the import is being made for. Required when multiple imports are desired at the same time.
                locale:
                  type: string
                  description: The locale the import is being made for. Required when multiple imports are desired at the same time.
                availabilities_store_ids:
                  type: array
                  description: The stores' id the import is being made for. Required when multiple availabilities imports are desired at the same time.
                  items:
                    type: string
                  uniqueItems: true
        required: true
      responses:
        '201':
          description: |
            The import request has been submitted successfully. The job's state is `received`.
            To process it, use the [Start import job method](/api/integration/catalog-sfcc/import-api_api/#operation/start-import-job).

            Use the [Get import job method](/api/integration/catalog-sfcc/import-api_api/#operation/get-import-job) with the returned `import_id`
            to check the status of the import job.
          content:
            application/json:
              schema:
                type: object
                description: Provides the ID for the newly created import job.
                properties:
                  id:
                    description: 'Unique identifier of the created import job. Use it to retrieve the import job status via the ''GET /import/{import_id}'' method.'
                    type: string
        '422':
          description: |
            This error can occur when you try to create an import job with an erroneous `type` property.
            To fix this issue, use the `entities` property instead.
        '429':
          description: |
            The import job is not created. We recommend that requests are queued so messages are not lost.
            Retry only after the recommended time specified in the `header` has passed.

            This error occurs if:
            - Imports are disabled (Contact [support](https://support.newstore.com/) for further details.)
            - You reach the configured rate limit for import jobs with one or more of the imported entities.

              Newstore does not internally queue a job to prevent overloading internal queues.
              The platform will not create a new import job for the specified entity until some jobs in queue or being processed are finished.

              The default limits specified for each entity are:

               - Products:       10
               - Categories:     20
               - Prices:         20
               - Availabilities: 20

              To increase the default limits for your business, contact [support](https://support.newstore.com/).
          content:
            application/json:
              schema:
                type: object
                description: Contains details of an error
                properties:
                  request_id:
                    description: Unique identifier of request
                    type: string
                  message:
                    description: Detailed information why request failed
                    type: string
          headers:
            Retry-After:
              schema:
                type: string
              description: 'Number of seconds client should wait until next retry request, so too many tries are not rejected.'
        '500':
          description: Internal server error.
    get:
      parameters:
        - name: filter
          in: query
          required: false
          schema:
            type: string
          description: |
            The field to filter and its filter value(s). The field is specified in subscript notation and its
            values are comma separated. When the value is expression of a range, the min and max range are
            separated by the pipe character (`|`).

            **Examples**:
              1. `?filter[state]=failed`
              2. `?filter[state]=processing,finished`
              3. `?filter[entities]=products`
              4. `?filter[completed_at]=2016-10-01|2016-10-15`
              5. `?filter[state]=processing,finished&filter[completed_at]=2016-10-01|2016-10-15`
        - name: offset
          in: query
          required: false
          description: The page offset.
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: count
          in: query
          required: false
          description: The number of requested import jobs.
          schema:
            type: integer
            default: 10
            minimum: 1
        - name: sort
          in: query
          required: false
          description: 'Sorts the returned values. Takes two values separated by the pipe character (`|`), the field to sort and the sort order.'
          schema:
            type: string
          example: completed_at|desc
      summary: List import jobs
      operationId: list-import-jobs
      description: |
        Returns a list of import jobs.

        **Note:** Import jobs are deleted after 30 days and not returned by this method anymore.**
      responses:
        '200':
          description: The list of import jobs.
          content:
            application/json:
              schema:
                type: object
                description: Provides a list of import jobs.
                required:
                  - items
                allOf:
                  - type: object
                    description: Contains default fields for paginatable APIs.
                    required:
                      - pagination_info
                    properties:
                      pagination_info:
                        type: object
                        required:
                          - count
                          - total
                          - offset
                          - prev_url
                          - next_url
                        properties:
                          count:
                            description: Contains the count of the contained array.
                            type: integer
                          total:
                            description: Contains the total count of documents. This property is 'null' if the API is not able to determine the total count.
                            type: integer
                            nullable: true
                          offset:
                            description: Contains the current offset.
                            type: integer
                          prev_url:
                            description: An URI that can be used to get the previous page. This property is 'null' if the current page is equal to the first page.
                            type: string
                            format: uri
                            nullable: true
                          next_url:
                            description: A URI that can be used to get the next page. This property is 'null' if the current page is equal to the last page.
                            type: string
                            format: uri
                            nullable: true
                  - type: object
                    properties:
                      items:
                        type: array
                        description: A list of information about all the import jobs.
                        items:
                          type: object
                          description: Provides the status for the import request.
                          properties:
                            import_id:
                              type: string
                              description: The unique identifier of the job.
                            entities:
                              type: array
                              description: The type of data provided in the import job.
                              items:
                                type: string
                                enum:
                                  - products
                                  - categories
                                  - availabilities
                                  - prices
                              minItems: 1
                              uniqueItems: true
                            received_at:
                              type: string
                              format: date-time
                              description: The UTC timestamp indicating when the corresponding import request was received.
                            completed_at:
                              type: string
                              format: date-time
                              description: The UTC timestamp indicating when the import request was completed.
                            name:
                              type: string
                              description: The name of the job.
                            state:
                              type: string
                              description: 'The state of the import job. When all import chunks failed, the state is ''failed'' . When all chunks are done and at least one chunk was successfully processed, the state is ''finished'' otherwise the state is in ''progress''.'
                              enum:
                                - received
                                - waiting
                                - processing
                                - failed
                                - finished
                                - cleaning
                            full:
                              type: boolean
                              description: Determines if the job is a full or a partial import. A full import deletes the existing data and imports the new data. A partial import adds data on top of existing data.
                              default: false
        '400':
          description: |
            The requested count and offset resulted in a list fragment greater than the maximum count
            of the import job list. Change your pagination parameters.
        '500':
          description: |
            An error occurred while trying to retrieve the list of import jobs.
  '/import/{import_id}':
    parameters:
      - name: import_id
        in: path
        required: true
        schema:
          type: string
        description: 'Identifier received in the response of [Create import job method](/api/integration/catalog-sfcc/import-api_api#operation/create-import-job)'
    get:
      summary: Get import job
      operationId: get-import-job
      description: |
        Retrieves the status information of the specified import job. See the
        [list of statuses](/developers/guides/importdata#statuses) for more
        information. You can also see the status of an import job in NewStore Omnichannel Manager.
        See this [guide](/product/nomapp/nom-catalog#view-catalog-imports)
        for more information.

        **Important:** The `finished` status does not mean that there were no errors.

        To know if the import was successful, use the [List import errors](/api/integration/catalog-sfcc/import-api_api#operation/list-errors-for-import)
        method and check if it returns an empty array.

        **Related methods:**
        - [Get import chunk](/api/integration/catalog-sfcc/import-api_api#operation/get-import-chunk)
        - [List import errors](/api/integration/catalog-sfcc/import-api_api#operation/list-errors-for-import)
        - [Start import job](/api/integration/catalog-sfcc/import-api_api#operation/start-import-job)

        **Note:** Import jobs are deleted after 30 days and not returned by this method anymore.**
      responses:
        '200':
          description: |
            The current status of the import job.
          content:
            application/json:
              example:
                import_id: 39029b6c-7eb9-4eb3-8823-7f4f8f6e4252
                entities:
                  - prices
                source: ''
                provider: <provider>
                source_uri: 'https://some-uri-location/my_data.zip'
                transformed_uri: 'https://some-uri-location/my_data.zip'
                revision: 1510828770
                name: product_import_20170306
                received_at: '2017-11-16T10:39:30.888848149Z'
                completed_at: '2017-11-16T10:39:33.03405691Z'
                state: finished
                reason: ''
                full: true
              schema:
                type: object
                description: Provides the status for the import request.
                properties:
                  import_id:
                    type: string
                    description: The unique identifier of the job.
                  source:
                    type: string
                    description: The source provided by the import request.
                  provider:
                    type: string
                    description: 'The name of the provider of the data, for example, Demandware.'
                  entities:
                    type: array
                    description: The type of data provided in the import job.
                    items:
                      type: string
                      enum:
                        - products
                        - categories
                        - availabilities
                        - prices
                    minItems: 1
                    uniqueItems: true
                  source_uri:
                    type: string
                    description: The file location of the original file from the provider (only for information).
                  transformed_uri:
                    type: string
                  revision:
                    type: integer
                    description: 'The revision of the job with this set of entities. A change from a job with an entity of lower revision, will not overwrite an already recorded newer revision. The revision is determined at the time of job start.'
                  name:
                    type: string
                    description: The name of the job.
                  received_at:
                    type: string
                    format: date-time
                    description: The UTC timestamp indicating when the corresponding import request was received.
                  completed_at:
                    type: string
                    nullable: true
                    format: date-time
                    description: The UTC timestamp indicating when the import request was completed. 'completed_at' is null when the response is used for the 'processing' state.
                  state:
                    type: string
                    description: 'The state of the import job. When all import chunks failed, the state is ''failed'' . When all chunks are done and at least one chunk was successfully processed, the state is ''finished'' otherwise the state is in ''progress''.'
                    enum:
                      - received
                      - waiting
                      - processing
                      - failed
                      - finished
                      - cleaning
                  reason:
                    type: string
                    description: The reason why the import job failed.
                  full:
                    type: boolean
                    description: Determines if the job is a full or a partial import. A full import deletes the existing data and imports the new data. A partial import adds data on top of existing data.
                    default: false
                  shop:
                    type: string
                    description: The shop the import is being made for. Used when multiple availabilities imports are desired at the same time. Only appears if supplied in the Create Import request.
                  locale:
                    type: string
                    description: The locale the import is being made for. Used when multiple availabilities imports are desired at the same time. Only appears if supplied in the Create Import request.
                  availabilities_store_ids:
                    type: array
                    description: The ids of the stores the import is being made for. Used when multiple availabilities imports are desired at the same time. Only appears if supplied in the Create Import request.
                    items:
                      type: string
                  version:
                    description: Deprecated.
                  all_import_requests_published:
                    type: integer
                    description: Used internally.
                  cleaned_entities:
                    type: array
                    items:
                      type: string
                    description: Used internally.
        '404':
          description: No job with the given `import_id` exists.
        '500':
          description: |
            An error occurred while trying to retrieve the import job status.
  '/import/{import_id}/start':
    parameters:
      - name: import_id
        in: path
        required: true
        schema:
          type: string
        description: 'Identifier received in the response of [Create import job method](/api/integration/catalog-sfcc/import-api_api#operation/create-import-job)'
    post:
      summary: Start import job
      operationId: start-import-job
      description: |
        Adds the import job to the processing queue. It is automatically processed when it reaches
        the first position of the queue.

        After you call this method, the following updates happen:

        1- The state of the job is automatically updated:
           - While the job is waiting to be processed, `state` is set to `waiting`, and the job
             starts when previous waiting jobs have been processed.
           - When the job is being processed, the `state` is set to `processing`.

        2- The import job `transformed_uri` property is set. This field must point to a ZIP file
           containing all the JSON files to import.
           This field cannot point to a JSON file.

        Each JSON file must:
        - Contain only one type of entity, formatted as described in the `/products`, `/availability`, `/categories`
          and `/prices` methods.
        - Have the entity type it describes ("products", "categories", "availabilities", "prices")
          in its path/filename.

          For example, if you have a file containing the prices of your products, you can name it `prices_1.json`.

        **Related methods:**
        - [Get import job](/api/integration/catalog-sfcc/import-api_api/#operation/get-import-job)
        - [Get import chunk](/api/integration/catalog-sfcc/import-api_api#operation/get-import-chunk)
        - [List import errors](/api/integration/catalog-sfcc/import-api_api#operation/list-errors-for-import)

        **Note:** Import jobs are deleted after 30 days and not handled by this method anymore.**
      requestBody:
        content:
          application/json:
            example:
              transformed_uri: 'https://assets.mycompany.com/integrations/newstore/products-transformed-1536677418000.zip'
            schema:
              type: object
              description: Requires the transformed URI in order to start the import job
              required:
                - transformed_uri
              properties:
                transformed_uri:
                  type: string
                  format: uri
                  description: 'URI to the ZIP file containing the source files in the required NewStore JSON format. This field cannot be set to a different value once it''s been set the first time. Each JSON file in the ZIP file must contain the entity type it represents in its filename. For example, if you have a file for prices, it must contain ''prices'' in its filename. The list of entity names can be found in the ''Create import job'' method documentation. This URI must be either an HTTPS URIs or an Amazon S3 bucket URI, and NewStore must have access to it.'
                  minLength: 1
        required: true
      responses:
        '200':
          description: |
            The import request has been submitted successfully.
            Use the [Get import job method](/api/integration/catalog-sfcc/import-api_api/#operation/get-import-job) to check the status of the
            import job.
          content:
            application/json:
              example:
                cleaned_entities: null
                completed_at: null
                created_by: 22IB3UROr1S3Je9hDaRh7f
                entities:
                  - products
                import_id: 90955bbb-74a6-490b-80d0-fb20e459118c
                name: Scheduled Products Import Job
                provider: Salesforce Commerce Cloud
                reason: ''
                received_at: '2018-09-11T14:50:19.272756Z'
                revision: 1536677419000
                source: ''
                source_uri: 's3://aws.amazon.com/mycompany/erp/export/products/products-export-1536677417000.xml'
                state: waiting
                transformed_uri: 'https://assets.mycompany.com/integrations/newstore/products-transformed-1536677418000.zip'
                version: 0
              schema:
                type: object
                description: Provides the status for the import request.
                properties:
                  import_id:
                    type: string
                    description: The unique identifier of the job.
                  source:
                    type: string
                    description: The source provided by the import request.
                  provider:
                    type: string
                    description: 'The name of the provider of the data, for example, Demandware.'
                  entities:
                    type: array
                    description: The type of data provided in the import job.
                    items:
                      type: string
                      enum:
                        - products
                        - categories
                        - availabilities
                        - prices
                    minItems: 1
                    uniqueItems: true
                  source_uri:
                    type: string
                    description: The file location of the original file from the provider (only for information).
                  transformed_uri:
                    type: string
                  revision:
                    type: integer
                    description: 'The revision of the job with this set of entities. A change from a job with an entity of lower revision, will not overwrite an already recorded newer revision. The revision is determined at the time of job start.'
                  name:
                    type: string
                    description: The name of the job.
                  received_at:
                    type: string
                    format: date-time
                    description: The UTC timestamp indicating when the corresponding import request was received.
                  completed_at:
                    type: string
                    nullable: true
                    format: date-time
                    description: The UTC timestamp indicating when the import request was completed. 'completed_at' is null when the response is used for the 'processing' state.
                  state:
                    type: string
                    description: 'The state of the import job. When all import chunks failed, the state is ''failed'' . When all chunks are done and at least one chunk was successfully processed, the state is ''finished'' otherwise the state is in ''progress''.'
                    enum:
                      - received
                      - waiting
                      - processing
                      - failed
                      - finished
                      - cleaning
                  reason:
                    type: string
                    description: The reason why the import job failed.
                  full:
                    type: boolean
                    description: Determines if the job is a full or a partial import. A full import deletes the existing data and imports the new data. A partial import adds data on top of existing data.
                    default: false
                  shop:
                    type: string
                    description: The shop the import is being made for. Used when multiple availabilities imports are desired at the same time. Only appears if supplied in the Create Import request.
                  locale:
                    type: string
                    description: The locale the import is being made for. Used when multiple availabilities imports are desired at the same time. Only appears if supplied in the Create Import request.
                  availabilities_store_ids:
                    type: array
                    description: The ids of the stores the import is being made for. Used when multiple availabilities imports are desired at the same time. Only appears if supplied in the Create Import request.
                    items:
                      type: string
                  version:
                    description: Deprecated.
                  all_import_requests_published:
                    type: integer
                    description: Used internally.
                  cleaned_entities:
                    type: array
                    items:
                      type: string
                    description: Used internally.
        '400':
          description: |
            The body contains wrong data.
        '404':
          description: |
            The import job ID could not be found.
        '429':
          description: |
            The import job has not started. You can retry job after some time period. See header `Retry-After`. This error occurs if:
            - Your integration does not accommodate sending multiple imports at the same time. This error can typically be avoided by submitting Import requests with either Catalog Shop and Locale, or Availabilities Store ID to make import more specific rather than starting broad import.
            - You have started too many import jobs in a short timeframe, for example more than 2 imports in single second. It is advised to slow down.
          content:
            application/json:
              schema:
                type: object
                description: Contains details of an error
                properties:
                  request_id:
                    description: Unique identifier of request
                    type: string
                  message:
                    description: Detailed information why request failed
                    type: string
          headers:
            Retry-After:
              schema:
                type: string
              description: 'Number of seconds client should wait until next retry request, so too many tries are not rejected.'
        '500':
          description: |
            An error occurred while trying to start the import job.
  '/import/{import_id}/errors':
    parameters:
      - name: import_id
        in: path
        required: true
        schema:
          type: string
        description: |
          Identifier received in the response of [Create import job method](/api/integration/catalog-sfcc/import-api_api#operation/create-import-job)
    get:
      summary: List import errors
      operationId: list-errors-for-import
      description: |
        Retrieves a list of errors for the specified import job.
        You can also see a list of errors for an import job in NewStore Omnichannel Manager.
        See this [guide](/product/nomapp/nom-catalog#view-catalog-imports)
        for more information.

        **Note:** Import jobs are deleted after 30 days and not returned by this method anymore.**
      responses:
        '200':
          description: |
            Current errors of the import job.
          content:
            application/json:
              examples:
                all_good:
                  summary: No errors
                  value:
                    items: []
                image_not_found:
                  summary: Image not found
                  value:
                    items:
                      - entity_type: images
                        entity_id: 'http://newstore-assets-75124431543-useast1.s3-website-us-east-1.amazonaws.com/abcd/someimage.jpg'
                        reason: 'inspecting item {ctx:{UserID:0ce50c9b6b517a9add277c RequestID:5341.3.364 Tenant:abcd CorrelationIDs:map[import_id:030f09ec-b2]} stage:x url:http://newstore-assets-751244-website-us-east-1.amazonaws.com/absc/tank_back.jpg receivedAt:{sec:63645845363 nsec:748581294 loc:<nil>} result:0xc42024c060} failed: error while calculating file information: non-200 status code 404 while fetching source file with url: http://newstore-assets-7555644-website-us-east-1.amazonaws.com/absc/someimage.jpg'
                        created_at: '2017-11-09T17:29:47.459703Z'
                zip_file_invalid:
                  summary: Zip file is invalid
                  value:
                    items:
                      - entity_type: products
                        entity_id: MWTASMA04QE001
                        reason: 'variation_size_gender must be one of the following: ''male'', ''female'', ''unisex'''
                        created_at: '2020-01-20T15:35:44.784951Z'
                wrong_definitions:
                  summary: Wrong definitions specified
                  value:
                    items:
                      - entity_type: products
                        entity_id: '2359717'
                        reason: 'Invalid type. Expected: number, given: string'
                        created_at: '2018-10-26T08:36:35.283416Z'
                invalid_prices:
                  summary: Invalid prices specified
                  value: |-
                    items:
                      - entity_type: prices
                        entity_id: 'XYZ1000012'
                        reason: 'product's price is invalid. The number of digits doesn't match with currency code. product id 123412341, price 30.244, currency USD'
                        created_at: '2021-01-25T17:29:47.459703Z'
                path_required:
                  summary: Path is required
                  value:
                    items:
                      - entity_type: categories
                        entity_id: <unknown>
                        reason: path is required
                        created_at: '2017-04-09T09:11:35.141803Z'
                import_chunk_error:
                  summary: Import chunk errors
                  value:
                    items:
                      - entity_type: availabilities
                        entity_id: 7f86a2a9-4e66-4761-b044-42399ddced78
                        reason: failing item as whole import chunk failed
                        created_at: '2018-06-06T22:12:14.194537Z'
              schema:
                type: object
                description: Provides the error log information for the import request.
                required:
                  - items
                properties:
                  items:
                    type: array
                    description: The import error message.
                    items:
                      title: Import item error
                      type: object
                      description: Import item error message.
                      required:
                        - entity_type
                        - entity_id
                        - reason
                        - created_at
                      properties:
                        entity_type:
                          type: string
                          description: Type of the entity to be imported.
                          enum:
                            - products
                            - categories
                            - availabilities
                            - prices
                            - images
                        entity_id:
                          type: string
                          description: 'Entity ID of the import log (product id, image url).'
                        reason:
                          type: string
                          description: Import log message entry.
                        created_at:
                          type: string
                          format: date-time
                          description: The UTC timestamp that indicates when the corresponding import log error was recorded.
        '404':
          description: |
            The import job ID could not be found.
        '500':
          description: |
            An error occurred while trying to retrieve the import job errors.
    post:
      summary: Save import errors
      operationId: save-import-errors
      description: |
        Saves import errors to the database. Use it to report errors occurring during an import.
        For example, transformation services, integration scripts such as lambda functions can
        call this method to report errors.

        **Note:** Import jobs are deleted after 30 days and not handled by this method anymore.**
      requestBody:
        content:
          application/json:
            schema:
              type: array
              description: import item error schema
              items:
                type: object
                required:
                  - error_id
                  - entity_type
                  - entity_id
                  - reason
                properties:
                  error_id:
                    type: string
                    description: A random uuid that identify this error
                    format: uuid
                  entity_type:
                    type: string
                    description: The import entity for which this error occurred.
                    enum:
                      - products
                      - categories
                      - availabilities
                      - prices
                  entity_id:
                    type: string
                    description: The ID of the import item which failed to be imported.
                  reason:
                    type: string
                    description: The error message or reason why an item failed to be imported.
        required: true
      responses:
        '200':
          description: |
            The errors have been saved.
          content:
            application/json:
              schema:
                type: array
                description: post import item error response schema
                items:
                  type: object
                  properties:
                    acknowledged:
                      type: boolean
                      description: Indicates if the provided import item errors where successfully pushed to the related import job.
        '400':
          description: |
            The body contains wrong data.
        '404':
          description: |
            The import job ID could not be found.
        '500':
          description: |
            An error occurred while trying to save the import job errors.
  '/import/{import_id}/chunks':
    parameters:
      - name: import_id
        in: path
        required: true
        schema:
          type: string
        description: 'Identifier received in the response of [Create import job method](/api/integration/catalog-sfcc/import-api_api#operation/create-import-job)'
    get:
      summary: Get import chunk
      operationId: get-import-chunk
      description: |
        Retrieves chunk information for the specified import job.

        A import job is split into chunks of items. Use this method to get information about each of these chunks.
        Chunks are only created once the import job has reached the `processing` status.

        **Related methods:**
        - [Get import job](/api/integration/catalog-sfcc/import-api_api#operation/get-import-job)

        **Note:** Chunks are deleted after 30 days and not returned by this method anymore.**
      responses:
        '200':
          description: |
            Current chunks of the specified import job.
          content:
            application/json:
              example:
                items:
                  - chunk_id: 6424454cf0aae3e1ef4362f308d880f4714908dd
                    created_at: '2017-11-16T10:39:31.42703Z'
                    completed_at: '2017-11-16T10:39:31.457705Z'
                    size: 1
                    failed: false
                    failure_message: ''
                  - chunk_id: d21d20cfc5450e9b3412ff584fff1902c4300424
                    created_at: '2017-11-16T10:39:31.451872Z'
                    completed_at: '2017-11-16T10:39:31.730535Z'
                    size: 50
                    failed: false
                    failure_message: ''
              schema:
                type: object
                description: Provides chunk information for the import request.
                required:
                  - items
                properties:
                  items:
                    type: array
                    items:
                      type: object
                      title: Import job chunk information.
                      properties:
                        chunk_id:
                          description: Identifier of the chunk.
                          type: string
                        created_at:
                          description: Time when the chunk was created.
                          type: string
                          format: date-time
                        completed_at:
                          description: Time when the chunk processing was completed.
                          type: string
                          format: date-time
                          nullable: true
                        size:
                          description: Number of items in the chunk.
                          type: integer
                        failed:
                          description: Indicates if this chunk failed to be processed.
                          type: boolean
                        failure_message:
                          description: The reason of the failure.
                          type: string
        '404':
          description: |
            The import job ID could not be found.
        '500':
          description: |
            An error occurred while trying to retrieve the chunks of the import job.
  '/import/{import_id}/set_fail':
    parameters:
      - name: import_id
        in: path
        required: true
        schema:
          type: string
        description: 'Identifier received in the response of [Create import job method](/api/integration/catalog-sfcc/import-api_api#operation/create-import-job)'
    post:
      summary: Set import job status to failed
      operationId: set-status-to-failed
      description: |
        Sets the specified import job's status to `failed` for the specified reason.

        **Related methods:**
        - [Get import job](/api/integration/catalog-sfcc/import-api_api#operation/get-import-job)
        - [List import errors](/api/integration/catalog-sfcc/import-api_api#operation/list-errors-for-import)

        **Note:** Import jobs are deleted after 30 days and not handled by this method anymore.**
      requestBody:
        content:
          application/json:
            example:
              reason: incorrect data
            schema:
              type: object
              description: Contains the reason why the import job failed.
              required:
                - reason
              properties:
                reason:
                  type: string
                  description: The reason why the import job failed.
                  minLength: 1
        required: true
      responses:
        '200':
          description: |
            The import job's status has been set to `failed` for the specified reason.
          content:
            application/json:
              schema:
                type: object
                description: Provides the status for the import request.
                properties:
                  import_id:
                    type: string
                    description: The unique identifier of the job.
                  source:
                    type: string
                    description: The source provided by the import request.
                  provider:
                    type: string
                    description: 'The name of the provider of the data, for example, Demandware.'
                  entities:
                    type: array
                    description: The type of data provided in the import job.
                    items:
                      type: string
                      enum:
                        - products
                        - categories
                        - availabilities
                        - prices
                    minItems: 1
                    uniqueItems: true
                  source_uri:
                    type: string
                    description: The file location of the original file from the provider (only for information).
                  transformed_uri:
                    type: string
                  revision:
                    type: integer
                    description: 'The revision of the job with this set of entities. A change from a job with an entity of lower revision, will not overwrite an already recorded newer revision. The revision is determined at the time of job start.'
                  name:
                    type: string
                    description: The name of the job.
                  received_at:
                    type: string
                    format: date-time
                    description: The UTC timestamp indicating when the corresponding import request was received.
                  completed_at:
                    type: string
                    nullable: true
                    format: date-time
                    description: The UTC timestamp indicating when the import request was completed. 'completed_at' is null when the response is used for the 'processing' state.
                  state:
                    type: string
                    description: 'The state of the import job. When all import chunks failed, the state is ''failed'' . When all chunks are done and at least one chunk was successfully processed, the state is ''finished'' otherwise the state is in ''progress''.'
                    enum:
                      - received
                      - waiting
                      - processing
                      - failed
                      - finished
                      - cleaning
                  reason:
                    type: string
                    description: The reason why the import job failed.
                  full:
                    type: boolean
                    description: Determines if the job is a full or a partial import. A full import deletes the existing data and imports the new data. A partial import adds data on top of existing data.
                    default: false
                  shop:
                    type: string
                    description: The shop the import is being made for. Used when multiple availabilities imports are desired at the same time. Only appears if supplied in the Create Import request.
                  locale:
                    type: string
                    description: The locale the import is being made for. Used when multiple availabilities imports are desired at the same time. Only appears if supplied in the Create Import request.
                  availabilities_store_ids:
                    type: array
                    description: The ids of the stores the import is being made for. Used when multiple availabilities imports are desired at the same time. Only appears if supplied in the Create Import request.
                    items:
                      type: string
                  version:
                    description: Deprecated.
                  all_import_requests_published:
                    type: integer
                    description: Used internally.
                  cleaned_entities:
                    type: array
                    items:
                      type: string
                    description: Used internally.
        '404':
          description: |
            The import job ID could not be found.
        '500':
          description: |
            An error occurred while trying to retrieve update the import job.
  /import/availability:
    post:
      summary: Availability JSON schema
      operationId: stock
      description: |
        This JSON schema represents the expected structure of the availability data for a successful
        import.

        **Do not use this method for integration tasks.** This schema is presented here as reference documentation only.

        See the [import data tutorial](/docs/development/tutorials/import-data.html) to learn how to import data.
        To import your data, use the [Create import job method](/api/integration/catalog-sfcc/import-api_api#operation/create-import-job),
        and the [Start import job method](/api/integration/catalog-sfcc/import-api_api#operation/start-import-job).
      requestBody:
        content:
          application/json:
            examples:
              import_products_with_timestamps:
                summary: Import stock with timestamps
                value:
                  head:
                    store_mapping:
                      - store_id: b99c8c93-b4ea-4eb1-a037-f7e79b71700e
                        fulfillment_node_id: US01
                    mode: atp
                  items:
                    - product_id: '1000101'
                      quantity: 100
                      fulfillment_node_id: US01
                      revision: 1531156343845
                    - product_id: '1000102'
                      quantity: 100
                      fulfillment_node_id: US01
                      revision: 1531156343845
              import_products_with_future_inventory:
                summary: Import products with future inventory
                value:
                  head:
                    store_mapping:
                      - store_id: null
                        fulfillment_node_id: DC01
                    mode: atp
                  items:
                    - product_id: '1000101'
                      future_inventory:
                        quantity: 100
                        date: 2020-01-01T00:00:00.000Z
                      fulfillment_node_id: US01
                      revision: 1531156343845
              import_products_with_future_and_regular_inventory:
                summary: Import products with regular and future inventory
                value:
                  head:
                    store_mapping:
                      - store_id: null
                        fulfillment_node_id: DC01
                    mode: atp
                  items:
                    - product_id: '1000101'
                      quantity: 50
                      future_inventory:
                        quantity: 100
                        date: 2020-01-01T00:00:00.000Z
                      fulfillment_node_id: US01
                      revision: 1531156343845
            schema:
              type: object
              description: 'Contains an array of availability entries to set the stock on hand. When the import job API (i.e. using /import/<id>/start) is used for availability import, the json data is only validated when import job starts. If validation fails here, the import job could fail or, remain in ''processing'' state (in some edge-cases) Refer to the description of each property below for details.'
              required:
                - head
                - items
              properties:
                head:
                  type: object
                  properties:
                    store_mapping:
                      type: array
                      description: Assigns a NewStore store ID to a fulfillment node.
                      items:
                        type: object
                        properties:
                          store_id:
                            type: string
                            description: Identifier of the store in the NewStore platform.
                            nullable: true
                          fulfillment_node_id:
                            type: string
                            description: Identifier of the fulfillment node in the NewStore platform. This value can be equal to the 'store_id'.
                    mode:
                      type: string
                      description: |-
                        The mode of the availability import.
                         On_hand: When this value is specified, the import quantity is set as the stock on hand for the product in the specified fulfillment location in the platform. Allocations for items that have not been shipped and safety stock will be deducted to calculate the ATP for the product.
                        ATP: When this value is specified, the import quantity is set as the ATP of the product at the fulfillment location. No adjustments are made to this value.
                      enum:
                        - on_hand
                        - atp
                      default: on_hand
                items:
                  type: array
                  minLength: 1
                  items:
                    title: Availability
                    type: object
                    oneOf:
                      - required:
                          - product_id
                          - fulfillment_node_id
                          - quantity
                        not:
                          required:
                            - future_inventory
                        description: Provide 'quantity' to set the current inventory for the specific product.
                      - required:
                          - product_id
                          - fulfillment_node_id
                          - future_inventory
                        not:
                          required:
                            - quantity
                        description: Provide 'future_inventory' to set the future inventory for the specific product.
                      - required:
                          - product_id
                          - fulfillment_node_id
                          - quantity
                          - future_inventory
                        description: Provide values for both 'quantity' and 'future_inventory' when you want to set current and future inventory.
                    properties:
                      product_id:
                        type: string
                        minLength: 1
                        description: The unique identifier of the product to which this availability update applies.
                      quantity:
                        type: integer
                        minimum: 0
                        description: 'Current quantity in the specified store, as identified by the ''fulfillment_node_id''.'
                      future_inventory:
                        type: object
                        required:
                          - quantity
                          - date
                        description: Sets the future inventory for the specified product at the fulfillment location.
                        properties:
                          quantity:
                            type: integer
                            minimum: 0
                            description: Specifies the number of items that will be available on the specified 'date'.
                          date:
                            type: string
                            description: 'Specifies the date when the future inventory becomes available. The date has to be in the future and cannot be the current day or in the past. Use this format: ''YYYY-MM-DD''.'
                            example: '2020-12-25'
                      distribution_location_label:
                        type: string
                        description: 'DEPRECATED: Label which uniquely identifies the `DistributionLocation`.'
                        maxLength: 256
                      fulfillment_node_id:
                        type: string
                        description: Label which uniquely identifies the `FulfillmentNode`. A fulfillment node typically represents a place able to store and fulfill products.
                        minLength: 1
                        maxLength: 256
                      revision:
                        type: integer
                        description: Revision of the current item in Unix epoch time in milliseconds.
                        minimum: 1
                      bin_locations:
                        type: array
                        items:
                          type: string
                        description: Bin Locations of items in StorageLocation.
        required: true
      responses:
        '200':
          description: |
            The import request has been submitted successfully and will be processed.

            Use the [Get import job method](/api/integration/catalog-sfcc/import-api_api/#operation/get-import-job) with returned `import_id`
            to check the import job's status or open the returned `status_url`.
          content:
            application/json:
              example:
                cleaned_entities: null
                completed_at: null
                created_by: c77ae36c-42e9-4eb1-ae65-8b7b3047012a
                entities:
                  - availabilities
                import_id: 5779319e-facd-46e9-b03c-cd521f10235e
                name: availabilities_import
                provider: ''
                reason: ''
                received_at: '2018-07-09T19:49:43.604058278Z'
                revision: 1531165783604
                source: ''
                source_uri: ''
                state: processing
                transformed_uri: ''
                version: 0
              schema:
                type: object
                description: Provides the status for the import request.
                properties:
                  import_id:
                    type: string
                    description: The unique identifier of the job.
                  source:
                    type: string
                    description: The source provided by the import request.
                  provider:
                    type: string
                    description: 'The name of the provider of the data, for example, Demandware.'
                  entities:
                    type: array
                    description: The type of data provided in the import job.
                    items:
                      type: string
                      enum:
                        - products
                        - categories
                        - availabilities
                        - prices
                    minItems: 1
                    uniqueItems: true
                  source_uri:
                    type: string
                    description: The file location of the original file from the provider (only for information).
                  transformed_uri:
                    type: string
                  revision:
                    type: integer
                    description: 'The revision of the job with this set of entities. A change from a job with an entity of lower revision, will not overwrite an already recorded newer revision. The revision is determined at the time of job start.'
                  name:
                    type: string
                    description: The name of the job.
                  received_at:
                    type: string
                    format: date-time
                    description: The UTC timestamp indicating when the corresponding import request was received.
                  completed_at:
                    type: string
                    nullable: true
                    format: date-time
                    description: The UTC timestamp indicating when the import request was completed. 'completed_at' is null when the response is used for the 'processing' state.
                  state:
                    type: string
                    description: 'The state of the import job. When all import chunks failed, the state is ''failed'' . When all chunks are done and at least one chunk was successfully processed, the state is ''finished'' otherwise the state is in ''progress''.'
                    enum:
                      - received
                      - waiting
                      - processing
                      - failed
                      - finished
                      - cleaning
                  reason:
                    type: string
                    description: The reason why the import job failed.
                  full:
                    type: boolean
                    description: Determines if the job is a full or a partial import. A full import deletes the existing data and imports the new data. A partial import adds data on top of existing data.
                    default: false
                  shop:
                    type: string
                    description: The shop the import is being made for. Used when multiple availabilities imports are desired at the same time. Only appears if supplied in the Create Import request.
                  locale:
                    type: string
                    description: The locale the import is being made for. Used when multiple availabilities imports are desired at the same time. Only appears if supplied in the Create Import request.
                  availabilities_store_ids:
                    type: array
                    description: The ids of the stores the import is being made for. Used when multiple availabilities imports are desired at the same time. Only appears if supplied in the Create Import request.
                    items:
                      type: string
                  version:
                    description: Deprecated.
                  all_import_requests_published:
                    type: integer
                    description: Used internally.
                  cleaned_entities:
                    type: array
                    items:
                      type: string
                    description: Used internally.
        '500':
          description: |
            A server error occurred. Try again later.
      parameters:
        - name: full
          in: query
          description: Determines if the job is a full or partial import. Defaults to false.
          schema:
            type: boolean
      deprecated: true
      x-annotation-deprecated:
        since: 01/2017
        replaceWith: 'Use the [Create import job method](/api/integration/catalog-sfcc/import-api_api#operation/create-import-job) instead.'
  /import/categories:
    post:
      summary: Category JSON schema
      operationId: categories
      description: |
        This JSON schema represents the expected structure of the category data for a successful
        import.

        **Do not use this method for integration tasks.** This schema is presented here as
        reference documentation only.

        See the [import data tutorial](/developers/tutorials/import-data) to learn how
        to import data.
        To import your data, use the [Create import job method](/api/integration/catalog-sfcc/import-api_api#operation/create-import-job),
        and the [Start import job method](/api/integration/catalog-sfcc/import-api_api#operation/start-import-job).

        **Deprecated:** Use the [Create import job method](/api/integration/catalog-sfcc/import-api_api#operation/create-import-job) instead.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: Contains an array of categories.
              required:
                - head
                - items
              allOf:
                - type: object
                  properties:
                    head:
                      type: object
                      anyOf:
                        - required:
                            - shop
                            - locale
                          properties:
                            shop:
                              type: string
                              description: Identifier of the shop using these categories.
                            locale:
                              type: string
                              description: The language of the categories.
                            is_master:
                              type: boolean
                              description: 'Defines whether the imported locale is the master one. If this value is omitted, the imported locale is treated as master locale.'
                              default: true
                            internal_disable_image_processing:
                              type: boolean
                              description: 'Defines if the product images should be uploaded to NewStore''s hosting platform. If you set this field to `true`, ensure that you are hosting the images on a server that can handle the load.'
                              default: false
                        - required:
                            - catalog
                            - locale
                          properties:
                            catalog:
                              type: string
                              description: Identifier of the catalog using these categories.
                            locale:
                              type: string
                              description: The language of the categories.
                            is_master:
                              type: boolean
                              description: 'Defines whether the imported locale is the master one. If this value is omitted, the imported locale is treated as master locale.'
                              default: true
                            internal_disable_image_processing:
                              type: boolean
                              description: 'Defines if the product images should be uploaded to NewStore''s hosting platform. If you set this field to `true`, ensure that you are hosting the images on a server that can handle the load.'
                              default: false
                - type: object
                  properties:
                    items:
                      type: array
                      minLength: 1
                      items:
                        title: Category
                        type: object
                        description: 'Category object. A category is an arbitrary group of products that are related. For example, shoes or accessories. Categories are typically organized hierarchically. For example ''Shop > Shoes > Sandals''. Some of these fields are not used by default but can be manipulated via the NewStore SDK to be exposed in the Consumer App or the Associate App.'
                        required:
                          - path
                        properties:
                          path:
                            description: 'The hierarchy of the category. Categories and sub-categories must be separated by an angle bracket ([space]>[space]). For example, ''Shop > Clothing > Jackets''.'
                            type: string
                          description:
                            description: The description of the category.
                            type: string
                          images:
                            type: array
                            items:
                              type: object
                              title: Category Image
                              description: Information about a category image.
                              required:
                                - url
                              properties:
                                url:
                                  description: Category image URL. The server hosting the images must be available to NewStore.
                                  type: string
                                  format: uri
                                title:
                                  description: Category image title.
                                  type: string
                                identifier:
                                  type: string
                                  description: Category image identifier (e.g. image-top-1).
                                is_main:
                                  type: boolean
                                  description: Identifies the main image. The image that is considered the 'main image' is the first image of the category that consumers/associates see in the applications.
                                alt_text:
                                  description: 'The alternative text for the image, used if the image fails to be displayed.'
                                  type: string
                                  nullable: true
                                tags:
                                  description: Tenant-specific tags.
                                  type: array
                                  items:
                                    type: string
                                internal_dimension_height:
                                  description: The height of the image in pixels. Only valid when 'internal_disable_image_processing' is set to 'true' in the import file head field.
                                  type: integer
                                internal_dimension_width:
                                  description: The width of the image in pixels. Only valid when 'internal_disable_image_processing' is set to 'true' in the import file head field.
                                  type: integer
                                internal_dominant_color:
                                  description: The dominant color of the image. Only valid when 'internal_disable_image_processing' is set to 'true' in the import file head field.
                                  type: string
                          keywords:
                            description: 'List of keywords describing the category. By default, this field has no effect in the NewStore applications.'
                            type: array
                            minItems: 0
                            items:
                              type: string
                          position:
                            description: 'The position of this category in the category listing in the NewStore applications. By default, this field has no effect in the NewStore applications.'
                            type: integer
                          google_category:
                            type: string
                            description: The size category of the products in this category.
                            enum:
                              - clothing
                              - shoes
                              - hat
                              - gloves
                              - none
                          extended_attributes:
                            description: 'A collection of key-value pairs for custom diversification of the product category. By default, you can include a maximum of 500 extended attributes.'
                            maxItems: 500
                            type: array
                            items:
                              type: object
                              required:
                                - name
                                - value
                              properties:
                                name:
                                  description: 'The name or key of the extended attribute. By default, the length of the name can be a maximum of 250 characters.'
                                  maxLength: 250
                                  type: string
                                value:
                                  description: 'The value of the extended attribute. By default, the length of the value can be a maximum of 2000 characters.'
                                  maxLength: 2000
                                  type: string
        required: true
      responses:
        '200':
          description: |
            The import request has been submitted successfully and will be processed.

            Use the [Get import job method](/api/integration/catalog-sfcc/import-api_api/#operation/get-import-job) with returned
            `import_id` to check the import job's status or open the returned `status_url`.
          content:
            application/json:
              schema:
                type: object
                description: Provides the status for the import request.
                properties:
                  import_id:
                    type: string
                    description: The unique identifier of the job.
                  source:
                    type: string
                    description: The source provided by the import request.
                  provider:
                    type: string
                    description: 'The name of the provider of the data, for example, Demandware.'
                  entities:
                    type: array
                    description: The type of data provided in the import job.
                    items:
                      type: string
                      enum:
                        - products
                        - categories
                        - availabilities
                        - prices
                    minItems: 1
                    uniqueItems: true
                  source_uri:
                    type: string
                    description: The file location of the original file from the provider (only for information).
                  transformed_uri:
                    type: string
                  revision:
                    type: integer
                    description: 'The revision of the job with this set of entities. A change from a job with an entity of lower revision, will not overwrite an already recorded newer revision. The revision is determined at the time of job start.'
                  name:
                    type: string
                    description: The name of the job.
                  received_at:
                    type: string
                    format: date-time
                    description: The UTC timestamp indicating when the corresponding import request was received.
                  completed_at:
                    type: string
                    nullable: true
                    format: date-time
                    description: The UTC timestamp indicating when the import request was completed. 'completed_at' is null when the response is used for the 'processing' state.
                  state:
                    type: string
                    description: 'The state of the import job. When all import chunks failed, the state is ''failed'' . When all chunks are done and at least one chunk was successfully processed, the state is ''finished'' otherwise the state is in ''progress''.'
                    enum:
                      - received
                      - waiting
                      - processing
                      - failed
                      - finished
                      - cleaning
                  reason:
                    type: string
                    description: The reason why the import job failed.
                  full:
                    type: boolean
                    description: Determines if the job is a full or a partial import. A full import deletes the existing data and imports the new data. A partial import adds data on top of existing data.
                    default: false
                  shop:
                    type: string
                    description: The shop the import is being made for. Used when multiple availabilities imports are desired at the same time. Only appears if supplied in the Create Import request.
                  locale:
                    type: string
                    description: The locale the import is being made for. Used when multiple availabilities imports are desired at the same time. Only appears if supplied in the Create Import request.
                  availabilities_store_ids:
                    type: array
                    description: The ids of the stores the import is being made for. Used when multiple availabilities imports are desired at the same time. Only appears if supplied in the Create Import request.
                    items:
                      type: string
                  version:
                    description: Deprecated.
                  all_import_requests_published:
                    type: integer
                    description: Used internally.
                  cleaned_entities:
                    type: array
                    items:
                      type: string
                    description: Used internally.
        '500':
          description: |
            A server error occurred. Try again later.
      parameters:
        - name: full
          in: query
          description: Determines if the job is a full or partial import. Defaults to false.
          schema:
            type: boolean
      deprecated: true
      x-annotation-deprecated:
        since: 03/2017
        replaceWith: 'Use the [Start import job method](/api/integration/catalog-sfcc/import-api_api#operation/start-import-job) instead.\n'
  /import/prices:
    post:
      summary: Price book JSON schema
      operationId: price-books
      description: |
        This JSON schema represents the expected structure of the price data for a successful
        import.

        **Important:** Ensure that you specify the correct number of decimal places for monetary values of prices,
        according to the specified currency. For example, if the currency is specified as ``USD``
        and the price has more than 2 decimal places, it is considered as invalid by the platform.

        For more information, see
        [pricing dependencies on currency](/product/processes/about-payments/#currency-rounding).

        **Do not use this method for integration tasks.** This schema is presented here as
        reference documentation only.

        See the [import data tutorial](/docs/development/tutorials/import-data.html) to learn how
        to import data. To import your data, use the
        [Create import job method](/api/integration/catalog-sfcc/import-api_api#operation/create-import-job), and the
        [Start import job method](/api/integration/catalog-sfcc/import-api_api#operation/start-import-job).

        **Important:** If you want to import several price books in one job, set the import type
        to `true` and create a zip file that contains separate price book files.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: Contains an array of prices.
              required:
                - head
                - items
              allOf:
                - type: object
                  properties:
                    head:
                      anyOf:
                        - type: object
                          required:
                            - pricebook
                            - catalog
                            - currency
                          properties:
                            pricebook:
                              description: The identifier of the pricebook. All product prices for the defined catalog are included to these pricebook. The pricebook that contains the default prices must be named 'default'.
                              type: string
                            catalog:
                              type: string
                              description: The catalog to which the products in this pricebook belong to.
                            currency:
                              type: string
                              description: The currency for the prices in this pricebook.
                              maxLength: 3
                            traits:
                              type: array
                              items:
                                type: string
                                description: A trait of this pricebook.
                        - type: object
                          required:
                            - pricebook
                            - shop
                            - currency
                          properties:
                            pricebook:
                              description: The identifier of the pricebook. All product prices for the defined catalog are included to these pricebook. The pricebook that contains the default prices must be named 'default'.
                              type: string
                            shop:
                              type: string
                              description: The shop to which the products in this pricebook belong to.
                            currency:
                              type: string
                              description: The currency for the prices in this pricebook.
                              maxLength: 3
                            traits:
                              type: array
                              items:
                                type: string
                                description: A trait of this pricebook.
                - type: object
                  properties:
                    items:
                      type: array
                      minLength: 1
                      items:
                        title: Price
                        type: object
                        description: Price object
                        required:
                          - product_id
                          - value
                        properties:
                          product_id:
                            type: string
                            description: The unique identifier for the product.
                          value:
                            description: Product price for the specific pricebook.
                            type: number
        required: true
      parameters:
        - name: full
          in: query
          description: |
            Determines if the job is a full or partial import. A full import deletes the existing
            data and imports the new data. A partial import adds data on top of existing data.
          schema:
            type: boolean
      responses:
        '200':
          description: |
            The import request has been submitted successfully and will be processed.

            Use the [Get import job method](/api/integration/catalog-sfcc/import-api_api/#operation/get-import-job) with returned
            `import_id` to check the import job's status or open the returned `status_url`.
          content:
            application/json:
              schema:
                type: object
                description: Provides the status for the import request.
                properties:
                  import_id:
                    type: string
                    description: The unique identifier of the job.
                  source:
                    type: string
                    description: The source provided by the import request.
                  provider:
                    type: string
                    description: 'The name of the provider of the data, for example, Demandware.'
                  entities:
                    type: array
                    description: The type of data provided in the import job.
                    items:
                      type: string
                      enum:
                        - products
                        - categories
                        - availabilities
                        - prices
                    minItems: 1
                    uniqueItems: true
                  source_uri:
                    type: string
                    description: The file location of the original file from the provider (only for information).
                  transformed_uri:
                    type: string
                  revision:
                    type: integer
                    description: 'The revision of the job with this set of entities. A change from a job with an entity of lower revision, will not overwrite an already recorded newer revision. The revision is determined at the time of job start.'
                  name:
                    type: string
                    description: The name of the job.
                  received_at:
                    type: string
                    format: date-time
                    description: The UTC timestamp indicating when the corresponding import request was received.
                  completed_at:
                    type: string
                    nullable: true
                    format: date-time
                    description: The UTC timestamp indicating when the import request was completed. 'completed_at' is null when the response is used for the 'processing' state.
                  state:
                    type: string
                    description: 'The state of the import job. When all import chunks failed, the state is ''failed'' . When all chunks are done and at least one chunk was successfully processed, the state is ''finished'' otherwise the state is in ''progress''.'
                    enum:
                      - received
                      - waiting
                      - processing
                      - failed
                      - finished
                      - cleaning
                  reason:
                    type: string
                    description: The reason why the import job failed.
                  full:
                    type: boolean
                    description: Determines if the job is a full or a partial import. A full import deletes the existing data and imports the new data. A partial import adds data on top of existing data.
                    default: false
                  shop:
                    type: string
                    description: The shop the import is being made for. Used when multiple availabilities imports are desired at the same time. Only appears if supplied in the Create Import request.
                  locale:
                    type: string
                    description: The locale the import is being made for. Used when multiple availabilities imports are desired at the same time. Only appears if supplied in the Create Import request.
                  availabilities_store_ids:
                    type: array
                    description: The ids of the stores the import is being made for. Used when multiple availabilities imports are desired at the same time. Only appears if supplied in the Create Import request.
                    items:
                      type: string
                  version:
                    description: Deprecated.
                  all_import_requests_published:
                    type: integer
                    description: Used internally.
                  cleaned_entities:
                    type: array
                    items:
                      type: string
                    description: Used internally.
        '500':
          description: |
            A server error occurred. Try again later.
      deprecated: true
      x-annotation-deprecated:
        since: 01/2017
        replaceWith: |
          Use the [Create import job method](/api/integration/catalog-sfcc/import-api_api#operation/create-import-job) instead.
  /import/products:
    post:
      summary: Product JSON schema
      operationId: products
      description: |
        This JSON schema represents the expected structure of the product data for a successful
        import. For more information on product data, see the [parent resource](/api/integration/catalog-sfcc/import-api_api).

        **Do not use this method for integration tasks.** This schema is presented here as reference
        documentation only.

        Importing products is complex, you must read the
        [import data tutorial](/docs/development/tutorials/import-data.html) to learn how to
        import data, ensure your products can be listed and that their variations are grouped
        properly in NewStore Associate App.

        By default products can be searched by title, description, color, size, and caption but
        not by the `product_id` or `SKU`. If you want to be able to search for products using a
        specific identifier, add the field as `searchable_attributes` in the head section of your
        product import JSON. For more information, read the **Creating product data** section of the
        [import data tutorial](/docs/development/tutorials/import-data.html).

        To import your data, use the [Create import job method](/api/integration/catalog-sfcc/import-api_api#operation/create-import-job),
        and the [Start import job method](/api/integration/catalog-sfcc/import-api_api#operation/start-import-job).
      requestBody:
        content:
          application/json:
            example:
              head:
                shop: storefront-catalog-en
                shop_display_name: Storefront Catalog US
                locale: en-US
                is_master: true
                filterable_attributes:
                  - name: material
                    path: $.material
                  - name: fit
                    path: '$.extended_attributes[?(@.name == ''fit'')].value'
                searchable_attributes:
                  - name: product_id
                    path: $.product_id
                    weight: 10
                  - name: ean13
                    path: '$.external_identifiers[?(@.type == ''ean13'')].value'
                    weight: 5
              items:
                - product_id: '1000101'
                  variant_group_id: variant_group_10001
                  title: Bohemian Print Cutout Chiffon Maxi Dress
                  caption: 'Our summer-ready chiffon dress features a bohemian print and beaded cut-outs for a textural twist to maxi styles. Full of creativity on every level, it offers delicate transparencies with a pleated hem for extra swish as you move through the summer heat.'
                  description: Bohemian Print Chiffon Gathered Waist Silk Dress
                  show_in_listing: true
                  serialized_inventory: false
                  online_to: '2030-04-01T07:00:00Z'
                  images:
                    - url: 'https://mycompany/hoster/images/default/products/SU16/10001_014_Multi_OFR-1.jpg'
                      internal_dimension_height: 2000
                      internal_dimension_width: 1414
                      internal_dominant_color: '#F4F2F4'
                      is_main: true
                    - url: 'https://mycompany/hoster/images/default/products/SU16/10001_014_Multi_OSP-2.jpg'
                      internal_dimension_height: 2000
                      internal_dimension_width: 1414
                      internal_dominant_color: '#F4F2F4'
                  tax_class_id: standard
                  categories:
                    - path: Promotion Eligible
                    - path: Releases > SUMMER 1
                    - path: Shop > Dresses
                      position: 10
                      is_main: true
                  material: LADIES' 100% SILK WOVEN DRESS
                  country_of_origin: CN
                  product_hts_number: 6204.49.1000
                  shipping_weight_value: 1
                  shipping_weight_unit: lb
                  shipping_dimension_length: 5
                  shipping_dimension_width: 5
                  shipping_dimension_height: 5
                  shipping_dimension_unit: in
                  variation_color_value: Grace Sweater Beige
                  variation_size_value: '4'
                  variation_size_gender: unisex
                  google_category: none
                  variation_size_type: regular
                  variation_size_system: US
                  external_identifiers:
                    - type: sku
                      value: '3825952358'
                    - type: ean13
                      value: '1000101000007'
                  extended_attributes:
                    - name: care
                      value: 1000101 This product doesn't need special caring instructions. Handwash at 50°F is sufficent enough.
                    - name: fit
                      value: 1000101 Tight
            schema:
              type: object
              description: 'Contains an array of products. Importing products is complex, read the `import data tutorial` to learn how to import data, ensure your products can be listed and that their variations are grouped properly in Associate App.'
              required:
                - head
                - items
              allOf:
                - type: object
                  properties:
                    head:
                      anyOf:
                        - type: object
                          required:
                            - catalog
                            - locale
                          properties:
                            catalog:
                              type: string
                              description: The catalog those Categories are in.
                            locale:
                              type: string
                              description: 'Determines the language those categories is in. This value is case insensitive and lower-cased internally. It must be in the following format:`[a-z]{2}-[a-z]{2}`.'
                            shop_display_name:
                              type: string
                              description: 'A user-friendly name for the `shop`, or the catalog related to the specified locale.'
                            internal_disable_image_processing:
                              type: boolean
                              description: 'Defines if the product images should be uploaded to NewStore''s hosting platform. If you set this field to `true`, ensure that you are hosting the images on a server that can handle the load.'
                              default: false
                            is_master:
                              type: boolean
                              description: 'Defines whether the imported locale is the master locale. If this value is not provided, the imported locale is treated as master locale.'
                              default: true
                            searchable_attributes:
                              type: array
                              items:
                                type: object
                                properties:
                                  name:
                                    type: string
                                    description: Name of the attribute to be used when filtering in API.
                                  path:
                                    type: string
                                    description: 'JSONPath of the attribute to use to search/filter with, for example `$.material` will get material to filter with. For more information about JSONPath check: http://jsonpath.com/.'
                                  weight:
                                    type: integer
                                    description: 'Weight of the attribute in the full text search, the bigger the weight the more the attribute will matter in the search result.'
                            filterable_attributes:
                              type: array
                              items:
                                type: object
                                properties:
                                  name:
                                    type: string
                                    description: Name of the attribute to be used when filtering in API.
                                  path:
                                    type: string
                                    description: 'JSONPath of the attribute to use to search/filter with, for example `$.material` will get material to filter with. For more information about JSONPath check: http://jsonpath.com/'
                        - type: object
                          required:
                            - shop
                            - locale
                          properties:
                            shop:
                              type: string
                              description: The shop those categories are in. The value of this field must be `storefront-catalog-en`. It has no impact on your locale.
                            locale:
                              type: string
                              description: 'Determines the language those categories is in. This value is case insensitive and lower-cased internally. It must be in the following format:`[a-z]{2}-[a-z]{2}`.'
                            shop_display_name:
                              type: string
                              description: 'A user-friendly name for the `shop`, or the catalog related to the specified locale.'
                            internal_disable_image_processing:
                              type: boolean
                              description: 'Defines if the product images should be uploaded to NewStore''s hosting platform. If you set this field to `true`, ensure that you are hosting the images on a server that can handle the load.'
                              default: false
                            is_master:
                              type: boolean
                              description: 'Defines whether the imported locale is the master locale. If this value is not provided, the imported locale is treated as master locale.'
                              default: true
                            searchable_attributes:
                              type: array
                              items:
                                type: object
                                properties:
                                  name:
                                    type: string
                                    description: Name of the attribute to be used when filtering in API.
                                  path:
                                    type: string
                                    description: 'JSONPath of the attribute to use to search/filter with, for example `$.material` will get material to filter with. For more information about JSONPath check: http://jsonpath.com/.'
                                  weight:
                                    type: integer
                                    description: 'Weight of the attribute in the full text search, the bigger the weight the more the attribute will matter in the search result.'
                            filterable_attributes:
                              type: array
                              items:
                                type: object
                                properties:
                                  name:
                                    type: string
                                    description: Name of the attribute to be used when filtering in API.
                                  path:
                                    type: string
                                    description: 'JSONPath of the attribute to use to search/filter with, for example `$.material` will get material to filter with. For more information about JSONPath check: http://jsonpath.com/'
                - type: object
                  properties:
                    items:
                      type: array
                      minLength: 1
                      items:
                        title: Product
                        type: object
                        description: A product is a buyable item. These fields describe products and some of these fields are not used by default but can be manipulated via the NewStore SDK to be exposed in the Consumer App or the Associate App.
                        required:
                          - product_id
                          - variant_group_id
                        properties:
                          product_id:
                            description: Unique identifier of the product. This identifier is used in all NewStore APIs that are related to products.
                            type: string
                            minLength: 1
                          variant_group_id:
                            description: '**REQUIRED** The identifier of the variant group to which this product belongs. The variant group identifier groups all the variants of a product. For example, Grace Sweater Beige Size 4 and Grace Sweater Beige Size 6 are both variants of the same product and should be grouped with a single ``variant_group_id``. If a product has only one variant, create a unique variant group for it to represent it as a variantless product. Ensure that the same product is not assigned to multiple variant groups in the same shop.'
                            type: string
                          show_in_listing:
                            description: Determines if this product is displayed in the search results and product listings returned by NewStore applications.
                            type: boolean
                          sku:
                            description: '**DEPRECATED** Use the ''external_identifiers'' list to store the SKU. The stock keeping unit number of the product.'
                            type: string
                          title:
                            description: The product title. This field is user-facing.
                            type: string
                          brand:
                            description: The product's brand name. This field is user-facing.
                            type: string
                          caption:
                            description: A short version of the product's description used for meta tags or thumbnails.
                            type: string
                            nullable: true
                          description:
                            description: The product's description. This field is user-facing.
                            type: string
                            nullable: true
                          keywords:
                            description: 'List of keywords describing the product. By default, this field has no effect in the NewStore applications.'
                            type: array
                            items:
                              type: string
                          is_published:
                            description: 'Free boolean field to be used for custom implementations. By default, this field has no effect in the NewStore applications.'
                            type: boolean
                          is_active:
                            description: 'Free boolean field to be used for custom implementations. By default, this field has no effect in the NewStore applications.'
                            type: boolean
                          shipping_weight_value:
                            description: 'The weight of the product. Set the weight unit with ''shipping_weight_unit''. Not required during import, but this information might be required if you want to ship your products.'
                            type: number
                          shipping_weight_unit:
                            description: 'The weight unit of the product. Set the weight with ''shipping_weight_value''. Not required during import, but this information might be required if you want to ship your products.'
                            type: string
                            enum:
                              - g
                              - kg
                              - lb
                              - oz
                          shipping_dimension_length:
                            description: 'The length of the product. Set the unit of measurement with ''shipping_dimension_unit''. Not required during import, but this information might be required if you want to ship your products.'
                            type: number
                          shipping_dimension_width:
                            description: 'The width of the product. Set the unit of measurement with ''shipping_dimension_unit''. Not required during import, but this information might be required if you want to ship your products.'
                            type: number
                          shipping_dimension_height:
                            description: 'The height of the product. Set the unit of measurement with ''shipping_dimension_unit''. Not required during import, but this information might be required if you want to ship your products.'
                            type: number
                          shipping_dimension_unit:
                            description: The unit of measurement for the product dimensions.
                            type: string
                            enum:
                              - cm
                              - in
                          external_identifiers:
                            description: 'The product''s external identifier(s). Note that if you do not specify the SKU identifier, it is automatically set to the value of the ''product_id'' field.'
                            type: array
                            items:
                              type: object
                              required:
                                - type
                                - value
                              properties:
                                type:
                                  description: 'Type of the identifier. For example ''upc'', ''ean13'' or ''gtin''.'
                                  type: string
                                value:
                                  description: Value of the identifier.
                                  type: string
                          extended_attributes:
                            description: 'A collection of key-value pairs for custom diversification of the product. By default, you can include a maximum of 500 extended attributes.'
                            maxItems: 500
                            type: array
                            items:
                              type: object
                              required:
                                - name
                                - value
                              properties:
                                name:
                                  description: 'The name or key of the extended attribute. By default, the length of the name can be a maximum of 250 characters.'
                                  maxLength: 250
                                  type: string
                                value:
                                  description: 'The value of the extended attribute. By default, the length of the value can be a maximum of 2000 characters.'
                                  maxLength: 2000
                                  type: string
                          images:
                            description: The images of the products. One image must have the 'is_main' property set to 'true'.
                            type: array
                            items:
                              type: object
                              title: Product Image
                              description: Contains the image data of a product.
                              required:
                                - url
                              properties:
                                url:
                                  description: Product image URL.
                                  type: string
                                  format: uri
                                title:
                                  description: Product image title.
                                  type: string
                                identifier:
                                  type: string
                                  description: Product image identifier (e.g. image-top-1).
                                is_main:
                                  type: boolean
                                  description: Identifies the main image. The image that is considered the 'main image' is the first image of the product that consumers/associates see in the applications.
                                alt_text:
                                  description: 'The alternative text for the image, used if the image fails to be displayed.'
                                  type: string
                                  nullable: true
                                is_color_swatch:
                                  type: boolean
                                  description: Determines that this image is the representation of the color of the product.
                                tags:
                                  description: 'Tenant specific tags or use ''nwst::productonly'' to override the main image coming from the catalog. This image is only displayed in the product overview of an order inside the Fulfillment app and HQ.'
                                  type: array
                                  items:
                                    type: string
                                internal_dimension_height:
                                  description: The height of the image in pixels. Only valid when 'internal_disable_image_processing' is set to 'true' in the import file head field.
                                  type: integer
                                internal_dimension_width:
                                  description: The width of the image in pixels. Only valid when 'internal_disable_image_processing' is set to 'true' in the import file head field.
                                  type: integer
                                internal_dominant_color:
                                  description: The dominant color of the image. Only valid when 'internal_disable_image_processing' is set to 'true' in the import file head field.
                                  type: string
                          tax_class_id:
                            description: 'An identifier representing the tax class of the product. A ``tax_class_id`` is associated to a tax code from third-party tax calculation providers such as ``Avalara`` or ``Vertex``. For more information on tax codes, see the [business guide](https://docs.newstore.net/docs/processes/about-tax-calc.html).'
                            type: string
                          categories:
                            description: Categories of the product. One category must have the 'is_main' property set to 'true'.
                            type: array
                            items:
                              type: object
                              required:
                                - path
                              properties:
                                path:
                                  description: The category path (e.g. 'Furniture > Chairs').
                                  type: string
                                position:
                                  description: The position of the product inside the given category.
                                  type: integer
                                is_main:
                                  description: 'Determines that this category is the main category of the product. The main category will be used if customers get deep linked to a product. Only one category can be main and an error will be thrown if two categories are assigned. Also if no category is marked as main, the products cannot be found in NOM when filtered by category. For more information, see the [guide](/developers/guides/importdata#formatting-import).'
                                  type: boolean
                          template_id:
                            type: string
                            description: Determines a template that is used to display this product.
                          variation_color_value:
                            description: '**Important:** set this property or ''variation_size_value'' for every product in a variant group with more than one product. The display name of the product''s color.'
                            type: string
                          variation_size_value:
                            description: '**Important:** set this property or ''variation_color_value'' for every product in a variant group with more than one product. The display name of the product''s size.'
                            type: string
                          variation_size_gender:
                            type: string
                            description: The gender of the product.
                            enum:
                              - male
                              - female
                              - unisex
                          google_category:
                            type: string
                            description: The size category of the product.
                            enum:
                              - clothing
                              - shoes
                              - hat
                              - gloves
                              - none
                          variation_size_type:
                            type: string
                            description: This attribute is used to indicate the cut of the product.
                            enum:
                              - regular
                              - petite
                              - plus
                              - big and tall
                              - maternity
                          variation_size_system:
                            type: string
                            description: 'The size system this size is in. For example ''US'', ''EU'' or ''SML''. Individual size systems can be defined via a size systems config.'
                          variation_additional_1_name:
                            description: Allows determining the name for an additional dimension for the diversification of the product on top of color and size.
                            type: string
                          variation_additional_1_value:
                            description: Allows determining the value for an additional dimension for the diversification of the product on top of color and size.
                            type: string
                          variation_additional_2_name:
                            description: Allows determining the name for an additional dimension for the diversification of the product on top of color and size.
                            type: string
                          variation_additional_2_value:
                            description: Allows determining the value for an additional dimension for the diversification of the product on top of color and size.
                            type: string
                          preorder_start:
                            description: Determines the datetime (inclusive) when the product is available for pre-order.
                            type: string
                            format: date-time
                            example: '2020-03-16T05:00:14Z'
                          serialized_inventory:
                            description: Determines if the product inventory in NewStore is tracked using serial numbers.
                            type: boolean
                          online_from:
                            description: Determines the datetime (inclusive) when the product is available to be sold.
                            type: string
                            format: date-time
                            example: '2020-03-01T17:00:00Z'
                          online_to:
                            description: Determines the datetime (inclusive) when the product is not available anymore to be sold.
                            type: string
                            format: date-time
                            example: '2020-02-14T10:01:00Z'
                          product_hts_number:
                            description: 'A numerical code specified by a harmonized system for tariffs (required for international shipments). Could be 6-10 digits in length, depending on the country where the product is being classified.'
                            type: string
                          schedule_b:
                            description: Classification number for exporting goods out of the United States (required for international shipments).
                            type: string
                          country_of_origin:
                            type: string
                            description: is the country of manufacture.
                          material:
                            type: string
                            description: indicates the materials the product item is produced of.
        required: true
      responses:
        '200':
          description: |
            The import request has been submitted successfully and will be processed.

            Use the [Get import job method](/api/integration/catalog-sfcc/import-api_api/#operation/get-import-job) with returned `import_id`
            to check the import job's status or open the returned `status_url`.
          content:
            application/json:
              schema:
                type: object
                description: Provides the status for the import request.
                properties:
                  import_id:
                    type: string
                    description: The unique identifier of the job.
                  source:
                    type: string
                    description: The source provided by the import request.
                  provider:
                    type: string
                    description: 'The name of the provider of the data, for example, Demandware.'
                  entities:
                    type: array
                    description: The type of data provided in the import job.
                    items:
                      type: string
                      enum:
                        - products
                        - categories
                        - availabilities
                        - prices
                    minItems: 1
                    uniqueItems: true
                  source_uri:
                    type: string
                    description: The file location of the original file from the provider (only for information).
                  transformed_uri:
                    type: string
                  revision:
                    type: integer
                    description: 'The revision of the job with this set of entities. A change from a job with an entity of lower revision, will not overwrite an already recorded newer revision. The revision is determined at the time of job start.'
                  name:
                    type: string
                    description: The name of the job.
                  received_at:
                    type: string
                    format: date-time
                    description: The UTC timestamp indicating when the corresponding import request was received.
                  completed_at:
                    type: string
                    nullable: true
                    format: date-time
                    description: The UTC timestamp indicating when the import request was completed. 'completed_at' is null when the response is used for the 'processing' state.
                  state:
                    type: string
                    description: 'The state of the import job. When all import chunks failed, the state is ''failed'' . When all chunks are done and at least one chunk was successfully processed, the state is ''finished'' otherwise the state is in ''progress''.'
                    enum:
                      - received
                      - waiting
                      - processing
                      - failed
                      - finished
                      - cleaning
                  reason:
                    type: string
                    description: The reason why the import job failed.
                  full:
                    type: boolean
                    description: Determines if the job is a full or a partial import. A full import deletes the existing data and imports the new data. A partial import adds data on top of existing data.
                    default: false
                  shop:
                    type: string
                    description: The shop the import is being made for. Used when multiple availabilities imports are desired at the same time. Only appears if supplied in the Create Import request.
                  locale:
                    type: string
                    description: The locale the import is being made for. Used when multiple availabilities imports are desired at the same time. Only appears if supplied in the Create Import request.
                  availabilities_store_ids:
                    type: array
                    description: The ids of the stores the import is being made for. Used when multiple availabilities imports are desired at the same time. Only appears if supplied in the Create Import request.
                    items:
                      type: string
                  version:
                    description: Deprecated.
                  all_import_requests_published:
                    type: integer
                    description: Used internally.
                  cleaned_entities:
                    type: array
                    items:
                      type: string
                    description: Used internally.
        '500':
          description: |
            A server error occurred. Try again later.
      parameters:
        - name: full
          in: query
          description: |
            Determines if the job is a full or partial import. A full import deletes the existing
            data and imports the new data. A partial import adds data on top of existing data.
          schema:
            type: boolean
      deprecated: true
      x-annotation-deprecated:
        since: 01/2017
        replaceWith: |
          Use the [Create import job method](/api/integration/catalog-sfcc/import-api_api#operation/create-import-job) instead.
components:
  securitySchemes:
    newStoreAccessToken:
      type: http
      scheme: bearer
      bearerFormat: JWT

